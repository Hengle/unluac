function GetAbilityName(ability)
  local abilityName = X2Ability:GetAbilityStr(ability)
  return locale.common.abilityCategory[abilityName] or abilityName
end
function GetAbilityLevelExpPersent(ability)
  local info = X2Ability:GetAbilityInfo(ability)
  return info.level, info.levelPercent, info.exp, info.prevLevelTotalExp, info.nextLevelTotalExp
end
function GetSelectableAbilities()
  local FIGHT = 1
  local ILLUSION = 2
  local ADAMANT = 3
  local WILL = 4
  local DEATH = 5
  local WILD = 6
  local MAGIC = 7
  local VOCATION = 8
  local ROMANCE = 9
  local LOVE = 10
  local recommendAbilitiesTable = {
    [FIGHT] = {
      [ADAMANT] = {
        WILD,
        DEATH,
        VOCATION,
        LOVE,
        WILL
      },
      [WILL] = {VOCATION, ADAMANT}
    },
    [WILD] = {
      [VOCATION] = {
        WILL,
        ADAMANT,
        DEATH,
        FIGHT,
        ILLUSION
      },
      [ILLUSION] = {VOCATION}
    },
    [MAGIC] = {
      [ILLUSION] = {
        WILL,
        LOVE,
        ROMANCE,
        DEATH
      },
      [DEATH] = {
        WILL,
        LOVE,
        ILLUSION
      }
    },
    [LOVE] = {
      [WILL] = {MAGIC, ROMANCE},
      [ROMANCE] = {WILL}
    },
    [VOCATION] = {
      [FIGHT] = {ADAMANT, WILL},
      [WILD] = {DEATH, ILLUSION}
    },
    [DEATH] = {
      [ADAMANT] = {FIGHT},
      [VOCATION] = {WILD},
      [MAGIC] = {ILLUSION}
    }
  }
  local function FindA(ability)
    local recommended = {}
    local depth1 = recommendAbilitiesTable[ability]
    if depth1 ~= nil then
      for ability, _ in pairs(depth1) do
        table.insert(recommended, ability)
      end
    end
    return recommended
  end
  local function FindB(ability1, ability2)
    local recommended = {}
    local result1 = FindA(ability1)
    local result2 = FindA(ability2)
    local a, b = ability1, ability2
    local depth1 = recommendAbilitiesTable[a]
    if depth1 then
      local depth2 = depth1[b]
      if depth2 ~= nil then
        for _, ability in pairs(depth2) do
          table.insert(recommended, ability)
        end
      end
    end
    return recommended
  end
  local function FindC(excludeTable)
    local allAbilities = {
      FIGHT,
      ILLUSION,
      ADAMANT,
      WILL,
      DEATH,
      WILD,
      MAGIC,
      VOCATION,
      ROMANCE,
      LOVE
    }
    local IsNotExist = function(tbl, value)
      for i = 1, #tbl do
        if tbl[i] == value then
          return false
        end
      end
      return true
    end
    local abilities = {}
    for i = 1, #allAbilities do
      if IsNotExist(excludeTable, allAbilities[i]) then
        table.insert(abilities, allAbilities[i])
      end
    end
    return abilities
  end
  local recommendAbilities = {}
  local excludeAbilities = {}
  local activeAbilities = X2Ability:GetActiveAbility()
  local numActiveAbility = #activeAbilities
  if numActiveAbility == 1 then
    local ability = activeAbilities[1].type
    recommendAbilities = FindA(ability)
    table.insert(excludeAbilities, ability)
  elseif numActiveAbility == 2 then
    local ability1 = activeAbilities[1].type
    local ability2 = activeAbilities[2].type
    recommendAbilities = FindB(ability1, ability2)
    table.insert(excludeAbilities, ability1)
    table.insert(excludeAbilities, ability2)
  end
  for i = 1, #recommendAbilities do
    table.insert(excludeAbilities, recommendAbilities[i])
  end
  local abilities = FindC(excludeAbilities)
  return abilities, recommendAbilities
end
