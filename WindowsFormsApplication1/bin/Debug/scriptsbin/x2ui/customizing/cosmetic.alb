local titleMargin, sideMargin, bottomMargin = GetWindowMargin()
local PAGE_HEIGHT = {
  DEFAULT = 315,
  NOT_DEFAULT = 225,
  USE_SLIDER_DEFAULT_COUNT = 365,
  USE_SLIDER_NOT_DEFAULT_COUNT = 280
}
local RELATED_STYLE = {
  HAIR_COLOR,
  nil,
  EYEBROW_COLOR,
  nil,
  nil,
  nil,
  nil,
  nil,
  MUSTACHE_COLOR,
  nil,
  nil,
  nil,
  nil,
  nil,
  nil
}
local SetCosmeticWindowFunction = function(window, parent)
  function window:SetRaceGender(race, gender)
    self.race = race
    self.gender = gender
    window.buttonMenu:SetRaceGender(race, gender)
    window.cosmeticTab:SetRaceGender(race, gender)
  end
  function window:ResetUI()
    window.buttonMenu:ResetUI(type)
    window.cosmeticTab:ResetUI(type)
  end
  function window:Init()
    window.buttonMenu:Init(type)
    window.cosmeticTab:Init(type)
  end
  function window:SelectCosmeticType(type)
    self.type = type
    window.cosmeticTab:SelectCosmeticType(type)
  end
  function window:CloseCosmeticTab()
    window.buttonMenu:Show(true)
    window.cosmeticTab:Show(false)
  end
  function window:ReloadCosmetic()
    self.cosmeticTab:ReloadCosmetic()
  end
end
local SetCosmeticButtonMenuFunction = function(window, parent)
  for i = 1, MAX_TAB_TYPE do
    do
      local button = window.buttons[i]
      function button:OnClick()
        parent:SelectCosmeticType(i)
        window:Show(false)
      end
      button:SetHandler("OnClick", button.OnClick)
    end
  end
  function window:SetRaceGender(race, gender)
    if IsBeautyShop() then
      self.bg:SetColor(BEAUTYSHOP_COLOR[1], BEAUTYSHOP_COLOR[2], BEAUTYSHOP_COLOR[3], BEAUTYSHOP_COLOR[4])
    else
      self.bg:SetColor(RACE_COLOR_TABEL[race][1], RACE_COLOR_TABEL[race][2], RACE_COLOR_TABEL[race][3], RACE_COLOR_TABEL[race][4])
    end
  end
  function window:ResetUI()
    self:Init()
  end
  function window:Init()
    self:Show(false)
  end
end
function SetCosmeticPalletStyleWindowFunction(window, parent)
  function window:SetRaceGender(race, gender)
    local styleType = STYLE_LIST[race][gender][parent.index][self.index]
    self.styleType = styleType
    if styleType == EMPTY_STYLE then
      window:Show(false)
      return
    end
    window:Show(true)
    self.title:SetText(locale.characterCreate.titleText(locale.characterCreate.styleTitle[styleType]))
  end
  function window:Init()
    if self.styleType > MAX_STYLE_TYPE then
      return
    end
    local r, g, b = GetCurrentCosmeticItem(self.styleType)
    self:SelectItem(r, g, b)
  end
  local pallet = window.palletSection.pallet
  local spectrum = pallet.spectrum
  local posButton = spectrum.posButton
  local luminance = pallet.luminance
  local slider = luminance.slider
  function window:PostEvent(index)
    pallet:SetAlpha(index ~= 0 and 1 or 0.3)
    spectrum:Enable(index ~= 0)
    posButton:Enable(index ~= 0)
    slider.thumb:Enable(index ~= 0)
  end
  function window:SetUnitFromWidget()
    local specturamWitdh, specturamHeight = spectrum:GetExtent()
    local _, luminanceMax = slider:GetMinMaxValues()
    local hue = posButton.x / specturamWitdh
    local sat = 1 - posButton.y / specturamHeight
    local lum = 1 - slider:GetValue() / luminanceMax
    pallet:SetHLSColor(hue, lum, sat)
    local r, g, b = pallet:GetRGBColor()
    SelectCosmeticItem(window.styleType, nil, r, g, b)
  end
  function window:SelectItem(r, g, b)
    pallet:SetRGBColor(r, g, b)
    local hue, lum, sat = pallet:GetHLSColor()
    local specturamWitdh, specturamHeight = spectrum:GetExtent()
    local _, luminanceMax = slider:GetMinMaxValues()
    local x = hue * specturamWitdh
    local y = (1 - sat) * specturamHeight
    local h = (1 - lum) * luminanceMax
    posButton:Set(x, y, false)
    slider:Set(h, false)
  end
  function posButton:Set(x, y, trigger)
    posButton:AddAnchor("CENTER", spectrum, "TOPLEFT", x, y)
    posButton.x = x
    posButton.y = y
    if trigger then
      window:SetUnitFromWidget()
    end
  end
  function spectrum:OnUpdate(dt)
    if self:IsEnabled() == false then
      return
    end
    local mPos = {}
    mPos.x, mPos.y = X2Input:GetMousePos()
    local sOffset = {}
    sOffset.x, sOffset.y = spectrum:GetEffectiveOffset()
    local sExtent = {}
    sExtent.x, sExtent.y = spectrum:GetEffectiveExtent()
    local x = mPos.x - sOffset.x
    local y = mPos.y - sOffset.y
    if x < 0 or x > sExtent.x or y < 0 or y > sExtent.y then
      x = math.max(0, math.min(x, sExtent.x))
      y = math.max(0, math.min(y, sExtent.y))
      spectrum:ReleaseHandler("OnUpdate")
    end
    x = F_LAYOUT:CalcDontApplyUIScale(x)
    y = F_LAYOUT:CalcDontApplyUIScale(y)
    posButton:Set(x, y, true)
  end
  function posButton:OnMouseDown(arg)
    if spectrum:IsEnabled() and arg == "LeftButton" then
      spectrum:SetHandler("OnUpdate", spectrum.OnUpdate)
    end
    return true
  end
  posButton:SetHandler("OnMouseDown", posButton.OnMouseDown)
  spectrum:SetHandler("OnMouseDown", posButton.OnMouseDown)
  function posButton:OnMouseUp(arg)
    if spectrum:IsEnabled() and arg == "LeftButton" then
      spectrum:ReleaseHandler("OnUpdate")
    end
  end
  posButton:SetHandler("OnMouseUp", posButton.OnMouseUp)
  spectrum:SetHandler("OnMouseUp", posButton.OnMouseUp)
  function slider:Set(value, trigger)
    slider:SetValue(value, false)
    if trigger then
      window:SetUnitFromWidget()
    end
  end
  function slider:OnSliderChanged(value)
    window:SetUnitFromWidget()
  end
  slider:SetHandler("OnSliderChanged", slider.OnSliderChanged)
end
local function SetCommonCosmeticPageStyleWindow(window, parent)
  function window:SetCosmeticItemByPage(page, reloadTex)
    if self.styleType == EMPTY_STYLE then
      return
    end
    if page == nil then
      page = 1
    end
    window.page = page
    local totalCount = GetCosmeticItemCount(self.race, self.gender, self.styleType)
    if totalCount == 0 then
      return
    end
    local startIndex = (page - 1) * self.itemMaxCount
    for i = 1, #window.item do
      local item = window.item[i]
      local idx = startIndex + i
      if reloadTex or i > totalCount then
        item:SetCosmeticItem(self.race, self.gender, self.styleType, idx)
      end
      if idx == self.selectedItem then
        SetBGPushed(self.item[i], true)
      else
        SetBGPushed(self.item[i], false)
      end
    end
  end
  function window:SetRaceGender(race, gender)
    local styleType = STYLE_LIST[race][gender][parent.index][self.index]
    self.styleType = styleType
    self.race = race
    self.gender = gender
    if IsBeautyShop() then
      self.pageControl:SetPageStyle("beautyShop")
    end
    if styleType == EMPTY_STYLE then
      self:SetHeight(0)
      self:Show(false)
      return
    end
    self:Show(true)
    if styleType == MUSTACHE_TYPE then
      if self.slider ~= nil then
        self.sliderTitle:Show(false)
        self.slider:Show(false)
        self:SetHeight(PAGE_HEIGHT.NOT_DEFAULT)
      end
    elseif self.defaultCount then
      if self.useSlider then
        self.sliderTitle:Show(true)
        self.slider:Show(true)
        self:SetHeight(PAGE_HEIGHT.USE_SLIDER_DEFAULT_COUNT)
      else
        self:SetHeight(PAGE_HEIGHT.DEFAULT)
      end
    elseif self.useSlider then
      self.sliderTitle:Show(true)
      self.slider:Show(true)
      self:SetHeight(PAGE_HEIGHT.USE_SLIDER_NOT_DEFAULT_COUNT)
    else
      self:SetHeight(PAGE_HEIGHT.NOT_DEFAULT)
    end
    local totalCount = GetCosmeticItemCount(race, gender, styleType)
    local str = string.format("%s (%d)", locale.characterCreate.titleText(locale.characterCreate.styleTitle[styleType]), totalCount)
    self.title:SetText(str)
    if self.useSlider then
      if styleType == EYE_MAKEUP or styleType == CHEEK_TYPE then
        self.sliderTitle:SetText(locale.characterCreate.styleTitle[styleType] .. " " .. locale.characterCreate.sliderTitle.heavy)
      else
        self.sliderTitle:SetText(locale.characterCreate.styleTitle[styleType] .. " " .. locale.characterCreate.sliderTitle.strength)
      end
    end
    if STYLE_DELETE[styleType] then
      self.deleteButton:Show(true)
    else
      self.deleteButton:Show(false)
    end
    self.pageControl:SetPageByItemCount(totalCount, self.itemMaxCount)
    self.pageControl:MoveFirstPage()
    local isEnable = totalCount ~= 0
    for i = 1, self.itemMaxCount do
      local item = self.item[i]
      item:Enable(isEnable)
      item:SetAlpha(isEnable and 1 or 0.2)
    end
    self.title:SetAlpha(isEnable and 1 or 0.2)
    self.pageControl:Enable(isEnable)
  end
  function window.deleteButton:OnEnter()
    SetTargetAnchorTooltip(locale.characterCreate.resetItem, "BOTTOMLEFT", self, "TOPRIGHT", -7, 7)
  end
  window.deleteButton:SetHandler("OnEnter", window.deleteButton.OnEnter)
  function window.deleteButton:OnLeave()
    HideTooltip()
  end
  window.deleteButton:SetHandler("OnLeave", window.deleteButton.OnLeave)
  function window.pageControl:OnPageChanged(pageIndex, countPerPage)
    window:SetCosmeticItemByPage(pageIndex, true)
  end
end
function SetCosmeticPageStyleWindowFunction(window, parent)
  SetCommonCosmeticPageStyleWindow(window, parent)
  for i = 1, #window.item do
    do
      local item = window.item[i]
      function item:OnClick()
        if item.index ~= window.selectedItem then
          local weight
          if window.useSlider and window.slider and window.slider:IsVisible() then
            local value = window.slider:GetValue()
            local _, mValue = window.slider:GetMinMaxValues()
            weight = value / mValue
          end
          SelectCosmeticItem(window.styleType, item.index, nil, nil, nil, weight)
          window:SelectItem(item.index, weight)
        end
      end
      item:SetHandler("OnClick", item.OnClick)
    end
  end
  function window:SelectItem(index, weight)
    index = index or 0
    if self.useSlider and self.slider ~= nil then
      weight = weight or 1
      local _, mValue = self.slider:GetMinMaxValues()
      self.slider:SetValue(weight * mValue, false)
      self.slider:SetEnable(index ~= 0)
    end
    self.selectedItem = index
    if index ~= 0 then
      local calcedPage = math.floor((index - 1) / #self.item) + 1
      if calcedPage == self.page then
        self:SetCosmeticItemByPage(calcedPage, false)
      else
        self.pageControl:SetCurrentPage(calcedPage, true)
      end
    else
      for i = 1, #window.item do
        SetBGPushed(window.item[i], false)
      end
    end
    if RELATED_STYLE[self.styleType] ~= nil then
      parent:UpdateRelatedStyle(RELATED_STYLE[self.styleType], index)
    end
  end
  function window:Init()
    if self.styleType > MAX_STYLE_TYPE then
      return
    end
    local index, value = GetCurrentCosmeticItem(self.styleType)
    self:SelectItem(index, value)
  end
  function window:PostEvent(index)
    self:SetRaceGender(self.race, self.gender)
    self:Init()
  end
  function window.deleteButton:OnClick()
    SelectCosmeticItem(window.styleType, 0)
    window:SelectItem(0)
  end
  window.deleteButton:SetHandler("OnClick", window.deleteButton.OnClick)
  if window.slider ~= nil then
    function window.slider:OnSliderChanged(value)
      local value = self:GetValue()
      local _, mValue = self:GetMinMaxValues()
      SelectCosmeticItem(window.styleType, window.selectedItem, nil, nil, nil, value / mValue)
    end
    window.slider:SetHandler("OnSliderChanged", window.slider.OnSliderChanged)
  end
end
function SetCosmeticCompoundStyleWindowFunction(window, parent)
  SetCommonCosmeticPageStyleWindow(window, parent)
  local posWindow = window.modifierWnd.posWindow
  local posButton = posWindow.posButton
  local extentSliderSection = window.modifierWnd.extentSliderSection
  local rotateSliderSection = window.modifierWnd.rotateSliderSection
  window.extentValue = 1
  window.rotateValue = 0
  window.pos = {x = 0, y = 0}
  for i = 1, #window.item do
    do
      local item = window.item[i]
      function item:OnClick()
        if item.index ~= window.selectedItem then
          SelctCosmeticScarItem(item.index, window.pos.x, window.pos.y, window.extentValue, window.rotateValue)
          window:SelectItem(item.index)
        end
      end
      item:SetHandler("OnClick", item.OnClick)
    end
  end
  function window:SelectItem(index)
    index = index or 0
    posButton:Enable(index ~= 0)
    posWindow:Enable(index ~= 0)
    extentSliderSection:SetEnable(index ~= 0)
    rotateSliderSection:SetEnable(index ~= 0)
    self.selectedItem = index
    for i = 1, #self.item do
      if self.item[i].index == index then
        SetBGPushed(self.item[i], true)
      else
        SetBGPushed(self.item[i], false)
      end
    end
    if RELATED_STYLE[self.styleType] ~= nil then
      parent:UpdateRelatedStyle(RELATED_STYLE[self.styleType], index)
    end
  end
  function window.deleteButton:OnClick()
    SelctCosmeticScarItem(0, 0, 0, 1, 0)
    window:SelectItem(0)
  end
  window.deleteButton:SetHandler("OnClick", window.deleteButton.OnClick)
  function posWindow:ApplyValue(x, y, isSet)
    if x == nil or y == nil then
      x = 0
      y = 0
    end
    posButton:AddAnchor("CENTER", posWindow, x, y)
    window.pos.x = x
    window.pos.y = y * 3
    if isSet ~= nil and isSet then
      SelctCosmeticScarItem(window.selectedItem, window.pos.x, window.pos.y, window.extentValue, window.rotateValue)
    end
  end
  function posWindow:OnUpdate()
    if self:IsEnabled() == false then
      return
    end
    local mPos = {}
    mPos.x, mPos.y = X2Input:GetMousePos()
    local sOffset = {}
    sOffset.x, sOffset.y = posWindow:GetEffectiveOffset()
    local sExtent = {}
    sExtent.x, sExtent.y = posWindow:GetEffectiveExtent()
    local x = mPos.x - sOffset.x - sExtent.x / 2
    local y = mPos.y - sOffset.y - sExtent.y / 2
    if math.abs(x) > sExtent.x / 2 then
      x = sExtent.x / 2 * x / math.abs(x)
      posWindow:ReleaseHandler("OnUpdate")
    end
    if math.abs(y) > sExtent.y / 2 then
      y = sExtent.y / 2 * y / math.abs(y)
      posWindow:ReleaseHandler("OnUpdate")
    end
    x = F_LAYOUT:CalcDontApplyUIScale(x)
    y = F_LAYOUT:CalcDontApplyUIScale(y)
    posWindow:ApplyValue(x, y, true)
  end
  function posButton:OnMouseDown(arg)
    if posWindow:IsEnabled() and arg == "LeftButton" then
      posWindow:SetHandler("OnUpdate", posWindow.OnUpdate)
    end
    return true
  end
  posButton:SetHandler("OnMouseDown", posButton.OnMouseDown)
  posWindow:SetHandler("OnMouseDown", posButton.OnMouseDown)
  function posButton:OnMouseUp(arg)
    if posWindow:IsEnabled() and arg == "LeftButton" then
      posWindow:ReleaseHandler("OnUpdate")
    end
  end
  posButton:SetHandler("OnMouseUp", posButton.OnMouseUp)
  posWindow:SetHandler("OnMouseUp", posButton.OnMouseUp)
  function extentSliderSection:ApplyValue(value)
    local v = (value - 0.3) / 0.02
    window.extentValue = value
    self:SetValue(v, false)
  end
  local function ExtentSliderChanged(self, value)
    window.extentValue = 0.3 + 0.02 * value
    SelctCosmeticScarItem(window.selectedItem, window.pos.x, window.pos.y, window.extentValue, window.rotateValue)
  end
  extentSliderSection.slider:SetHandler("OnSliderChanged", ExtentSliderChanged)
  function rotateSliderSection:ApplyValue(value)
    local v = 50 - value * 100 / 360
    if v < 0 then
      v = v + 100
    end
    window.rotateValue = value
    self:SetValue(v, false)
  end
  local function RotateSliderChanged(self, value)
    window.rotateValue = 360 * ((50 - value) / 100)
    if window.rotateValue < 0 then
      window.rotateValue = window.rotateValue + 360
    end
    SelctCosmeticScarItem(window.selectedItem, window.pos.x, window.pos.y, window.extentValue, window.rotateValue)
  end
  rotateSliderSection.slider:SetHandler("OnSliderChanged", RotateSliderChanged)
  function window:Init()
    if self.styleType > MAX_STYLE_TYPE then
      return
    end
    local index = GetCurrentCosmeticItem(self.styleType)
    self:SelectItem(index)
    local x = 0
    local y = 0
    local rotate = 0
    local scale = 1
    if index ~= nil then
      x, y, rotate, scale = GetCosmeticScarInfo()
    end
    posWindow:ApplyValue(x, y / 3)
    extentSliderSection:ApplyValue(scale)
    rotateSliderSection:ApplyValue(rotate)
  end
end
function SetCosmeticHairColorStyleWindowFunction(window, parent)
  SetCommonCosmeticPageStyleWindow(window.pageStyle, parent)
  local defaultTab = window.tab.window[1]
  local dyeingTab = window.tab.window[2]
  local twoToneSelected = false
  local pageStyle = window.pageStyle
  for i = 1, #pageStyle.item do
    do
      local item = pageStyle.item[i]
      function item:OnClick()
        if item.index ~= pageStyle.selectedItem then
          local infoTable = {
            index = item.index
          }
          SelectCosmeticItem(window.styleType, nil, nil, nil, nil, nil, infoTable)
          pageStyle:SelectItem(item.index)
        end
      end
      item:SetHandler("OnClick", item.OnClick)
    end
  end
  function pageStyle:SelectItem(index)
    index = index or 0
    self.selectedItem = index
    local calcedPage = math.floor((index - 1) / #self.item) + 1
    if twoToneSelected then
      self:SetRaceGender(self.race, self.gender)
    end
    UIParent:LogAlways(string.format("calcedPage: %d, self.page: %d", calcedPage, self.page))
    if calcedPage == self.page then
      self:SetCosmeticItemByPage(calcedPage, false)
    else
      self.pageControl:SetCurrentPage(calcedPage, true)
    end
    local isEnable = calcedPage ~= 0
    for i = 1, self.itemMaxCount do
      local item = self.item[i]
      item:Enable(isEnable)
      item:SetAlpha(isEnable and 1 or 0.2)
    end
    self.title:SetAlpha(isEnable and 1 or 0.2)
    self.pageControl:Enable(isEnable)
  end
  function pageStyle:Init()
    if window.styleType > MAX_STYLE_TYPE then
      return
    end
    local index = GetCurrentCosmeticItem(window.styleType)
    self:SelectItem(index)
  end
  local tab = window.tab
  function tab:SetRaceGender(race, gender)
    local defaultTabStyleType = STYLE_LIST[race][gender][parent.index][defaultTab.index]
    defaultTab.styleType = defaultTabStyleType
    local dyeingTabStyleType = STYLE_LIST[race][gender][parent.index][dyeingTab.index]
    dyeingTab.styleType = dyeingTabStyleType
    if defaultTabStyleType == EMPTY_STYLE and dyeingTabStyleType == EMPTY_STYLE then
      window:Show(false)
      return
    end
    window:Show(true)
  end
  function tab:Init()
    if defaultTab.styleType > MAX_STYLE_TYPE or dyeingTab.styleType > MAX_STYLE_TYPE then
      return
    end
    local info = GetCurrentCosmeticItem(defaultTab.styleType)
    self:SelectItem(info)
  end
  function tab:PostEvent(index)
    tab:Enable(index ~= 0)
  end
  local SetHLSColor = function(pallet)
    local specturamWitdh, specturamHeight = pallet.spectrum:GetExtent()
    local _, luminanceMax = pallet.luminance.slider:GetMinMaxValues()
    local hue = pallet.spectrum.posButton.x / specturamWitdh
    local sat = 1 - pallet.spectrum.posButton.y / specturamHeight
    local lum = 1 - pallet.luminance.slider:GetValue() / luminanceMax
    pallet:SetHLSColor(hue, lum, sat)
  end
  local defaultTabPallet = defaultTab.palletSection.pallet
  local dyeingTabPallet = dyeingTab.palletSection.pallet
  function tab:SetUnitFromWidget()
    SetHLSColor(defaultTabPallet)
    SetHLSColor(dyeingTabPallet)
    local defaultR, defaultG, defaultB = defaultTabPallet:GetRGBColor()
    local twoToneR, twoToneG, twoToneB = dyeingTabPallet:GetRGBColor()
    local infoTable = {
      defaultR = defaultR,
      defaultG = defaultG,
      defaultB = defaultB,
      twoToneR = twoToneR,
      twoToneG = twoToneG,
      twoToneB = twoToneB,
      firstWidth = dyeingTab.twoToneSection.value,
      secondWidth = dyeingTab.bridgeSection.value
    }
    SelectCosmeticItem(window.styleType, nil, nil, nil, nil, nil, infoTable)
  end
  local SelectItem = function(pallet, r, g, b)
    pallet:SetRGBColor(r, g, b)
    local hue, lum, sat = pallet:GetHLSColor()
    local specturamWitdh, specturamHeight = pallet.spectrum:GetExtent()
    local _, luminanceMax = pallet.luminance.slider:GetMinMaxValues()
    local x = hue * specturamWitdh
    local y = (1 - sat) * specturamHeight
    local h = (1 - lum) * luminanceMax
    pallet.spectrum.posButton:Set(x, y, false)
    pallet.luminance.slider:Set(h, false)
  end
  function tab:SelectItem(info)
    SelectItem(defaultTabPallet, info.defaultR, info.defaultG, info.defaultB)
    SelectItem(dyeingTabPallet, info.twoToneR, info.twoToneG, info.twoToneB)
    local _, twoToneMax = dyeingTab.twoToneSection.slider:GetMinMaxValues()
    dyeingTab.twoToneSection:ApplyValue(info.firstWidth * twoToneMax)
    local _, bridgeMax = dyeingTab.bridgeSection.slider:GetMinMaxValues()
    dyeingTab.bridgeSection:ApplyValue(info.secondWidth * bridgeMax)
  end
  local SetPalletFunc = function(tab, palletSection)
    local pallet = palletSection.pallet
    local spectrum = pallet.spectrum
    local posButton = spectrum.posButton
    local luminance = pallet.luminance
    local slider = luminance.slider
    function posButton:Set(x, y, trigger)
      posButton:AddAnchor("CENTER", spectrum, "TOPLEFT", x, y)
      posButton.x = x
      posButton.y = y
      if trigger then
        tab:SetUnitFromWidget()
      end
    end
    function spectrum:OnUpdate(dt)
      if self:IsEnabled() == false then
        return
      end
      local mPos = {}
      mPos.x, mPos.y = X2Input:GetMousePos()
      local sOffset = {}
      sOffset.x, sOffset.y = spectrum:GetEffectiveOffset()
      local sExtent = {}
      sExtent.x, sExtent.y = spectrum:GetEffectiveExtent()
      local x = mPos.x - sOffset.x
      local y = mPos.y - sOffset.y
      if x < 0 or x > sExtent.x or y < 0 or y > sExtent.y then
        x = math.max(0, math.min(x, sExtent.x))
        y = math.max(0, math.min(y, sExtent.y))
        spectrum:ReleaseHandler("OnUpdate")
      end
      x = F_LAYOUT:CalcDontApplyUIScale(x)
      y = F_LAYOUT:CalcDontApplyUIScale(y)
      posButton:Set(x, y, true)
    end
    function posButton:OnMouseDown(arg)
      if spectrum:IsEnabled() and arg == "LeftButton" then
        spectrum:SetHandler("OnUpdate", spectrum.OnUpdate)
      end
      return true
    end
    posButton:SetHandler("OnMouseDown", posButton.OnMouseDown)
    spectrum:SetHandler("OnMouseDown", posButton.OnMouseDown)
    function posButton:OnMouseUp(arg)
      if spectrum:IsEnabled() and arg == "LeftButton" then
        spectrum:ReleaseHandler("OnUpdate")
      end
    end
    posButton:SetHandler("OnMouseUp", posButton.OnMouseUp)
    spectrum:SetHandler("OnMouseUp", posButton.OnMouseUp)
    function slider:Set(value, trigger)
      slider:SetValue(value, false)
      if trigger then
        tab:SetUnitFromWidget()
      end
    end
    local function OnSliderChanged(self, value)
      tab:SetUnitFromWidget()
    end
    slider:SetHandler("OnSliderChanged", OnSliderChanged)
  end
  SetPalletFunc(tab, defaultTab.palletSection)
  SetPalletFunc(tab, dyeingTab.palletSection)
  local function SetSliderFunc(sliderSection)
    function sliderSection:ApplyValue(value)
      self.value = value / 100
      self:SetValue(value, false)
    end
    local function ExtentSliderChanged(self, value)
      sliderSection.value = value / 100
      tab:SetUnitFromWidget()
    end
    sliderSection.slider:SetHandler("OnSliderChanged", ExtentSliderChanged)
  end
  SetSliderFunc(dyeingTab.twoToneSection)
  SetSliderFunc(dyeingTab.bridgeSection)
  function window:SetRaceGender(race, gender)
    local styleType = STYLE_LIST[race][gender][parent.index][self.index]
    self.styleType = styleType
    if styleType == EMPTY_STYLE then
      window:Show(false)
      return
    end
    self:Show(true)
    self.pageStyle:SetRaceGender(race, gender)
    self.tab:SetRaceGender(race, gender)
  end
  local function SelectControlByHairType(index)
    if index == nil then
      return
    end
    local featureSet = X2Player:GetFeatureSet()
    local _, _, _, twoTone = GetCosmeticItemInfo(window.race, window.gender, HAIR_TYPE, index)
    window.pageStyle:Show(false)
    window.tab:Show(false)
    if featureSet ~= nil and featureSet.hairTwoTone and twoTone then
      window.tab:Show(true)
      window.tab:Init()
      twoToneSelected = true
    else
      window.pageStyle.index = HAIR_COLOR
      window.pageStyle:Show(true)
      window.pageStyle:Init()
    end
  end
  function window:Init()
    if self.styleType > MAX_STYLE_TYPE then
      return
    end
    local index, _ = GetCurrentCosmeticItem(HAIR_TYPE)
    SelectControlByHairType(index)
  end
  function window:PostEvent(index)
    SelectControlByHairType(index)
  end
end
local SetCosmeticTabFrameFunction = function(window, parent)
  function window:SetRaceGender(race, gender)
    if IsBeautyShop() then
      self.bg:SetColor(BEAUTYSHOP_COLOR[1], BEAUTYSHOP_COLOR[2], BEAUTYSHOP_COLOR[3], BEAUTYSHOP_COLOR[4])
    else
      self.bg:SetColor(RACE_COLOR_TABEL[race][1], RACE_COLOR_TABEL[race][2], RACE_COLOR_TABEL[race][3], RACE_COLOR_TABEL[race][4])
    end
    for index = 1, #window.styleWindow do
      window.styleWindow[index]:SetRaceGender(race, gender)
      local inset = 15
      if index == 1 then
        window.styleWindow[index]:AddAnchor("TOPLEFT", window, inset, inset * 3)
      else
        window.styleWindow[index]:AddAnchor("TOPLEFT", window.styleWindow[index - 1], "BOTTOMLEFT", 0, inset)
      end
    end
  end
  function window:Init()
    for index = 1, #window.styleWindow do
      window.styleWindow[index]:Init()
    end
  end
  function window:UpdateRelatedStyle(type, index)
    for i = 1, #window.styleWindow do
      if window.styleWindow[i].styleType == type then
        window.styleWindow[i]:PostEvent(index)
      end
    end
  end
end
local function SetCosmeticTabFunction(window, parent)
  for tabIndex = 1, MAX_TAB_TYPE do
    local tabWindow = window.window[tabIndex]
    SetCosmeticTabFrameFunction(tabWindow, window)
  end
  function window:SetRaceGender(race, gender)
    if IsBeautyShop() then
      self.bg:SetColor(BEAUTYSHOP_COLOR[1], BEAUTYSHOP_COLOR[2], BEAUTYSHOP_COLOR[3], BEAUTYSHOP_COLOR[4])
    else
      self.bg:SetColor(RACE_COLOR_TABEL[race][1], RACE_COLOR_TABEL[race][2], RACE_COLOR_TABEL[race][3], RACE_COLOR_TABEL[race][4])
    end
    for tabIndex = 1, MAX_TAB_TYPE do
      window.window[tabIndex]:SetRaceGender(race, gender)
    end
  end
  function window:ResetUI()
    self:Init()
  end
  function window:Init()
    self.fixCheckbox:SetChecked(false)
    self.fixCheckbox:CheckBtnCheckChagnedProc(false)
    parent:SelectCosmeticType(HAIR_TAB)
    for tabIndex = 1, MAX_TAB_TYPE do
      window.window[tabIndex]:Init()
    end
    self:SelectTab(HAIR_TAB)
  end
  function window:SelectCosmeticType(type)
    self:Show(true)
    self:SelectTab(type)
  end
  function window.closeButton:OnClick()
    parent:CloseCosmeticTab()
  end
  window.closeButton:SetHandler("OnClick", window.closeButton.OnClick)
  function window.fixCheckbox:CheckBtnCheckChagnedProc(arg)
    X2Customizer:FixCosmetic(arg)
  end
  function window.fixCheckbox.textButton:OnEnter()
    SetTargetAnchorTooltip(locale.characterCreate.fix_tip, "TOPLEFT", self, "BOTTOMLEFT", 0, 0)
  end
  window.fixCheckbox.textButton:SetHandler("OnEnter", window.fixCheckbox.textButton.OnEnter)
  function window.fixCheckbox.textButton:OnLeave()
    HideTooltip()
  end
  window.fixCheckbox.textButton:SetHandler("OnLeave", window.fixCheckbox.textButton.OnLeave)
  function window:ReloadCosmetic()
    for tabIndex = 1, MAX_TAB_TYPE do
      window.window[tabIndex]:Init()
    end
  end
  window:SetHandler("OnEvent", window.ReloadCosmetic)
  window:RegisterEvent("RELOAD_COSMETIC_WINDOW")
end
function CreateCosmeticWindow(id, parent)
  local window = parent:CreateChildWidget("emptywidget", id, 0, true)
  window:SetWidth(432)
  local buttonMenu = CreateCosmeticButtonMenu("buttonMenu", window)
  buttonMenu:AddAnchor("TOPLEFT", window, 0, 0)
  local cosmeticTab = CreateCosmeticTabWindow("cosmeticTab", window)
  cosmeticTab:AddAnchor("TOPLEFT", window, 0, 0)
  SetCosmeticWindowFunction(window, parent)
  SetCosmeticButtonMenuFunction(buttonMenu, window)
  SetCosmeticTabFunction(cosmeticTab, window)
  function window:SetBeautyShopStyle()
    window.cosmeticTab:SetTabButtonBeautyShopStyle()
    window.buttonMenu:SetButtonMenuBeautyShopStyle()
  end
  return window
end
function GetCosmeticItemCount(race, gender, type)
  local func = {
    X2Customizer.GetNumCustomHair,
    X2Customizer.GetNumCustomHairColor,
    X2Customizer.GetNumCustomizingEyebrow,
    nil,
    nil,
    X2Customizer.GetNumCustomizingMakeUp,
    nil,
    X2Customizer.GetNumCustomizingDeco,
    X2Customizer.GetNumCustomizingDeco,
    nil,
    X2Customizer.GetNumCustomizingFaceDiffuse,
    X2Customizer.GetNumCustomSkinColor,
    X2Customizer.GetNumCustomizingFaceNormal,
    X2Customizer.GetNumCustomizingTattoo,
    X2Customizer.GetNumCustomizingScar
  }
  if type ~= EMPTY_STYLE then
    if STYLE_WINDOW_TYPE[type] ~= STYLE_PALLET then
      return func[type](customizingUnit)
    else
      return 0
    end
  end
end
