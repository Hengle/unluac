if X2Util:GetGameProvider() == MAILRU then
  function optionLocale:CreatTitleWidget(parent)
    local textbox = parent:CreateChildWidget("textbox", "titleTextbox", 0, true)
    textbox:SetAutoResize(true)
    return textbox
  end
  function optionLocale:CreateCheckButton(parent, text, leftInset)
    local checkButton = CreateCheckButton(parent:GetId() .. ".checkBox", parent, nil)
    local textbox = checkButton:CreateChildWidget("textbox", "textbox", 0, true)
    textbox:AddAnchor("LEFT", checkButton, "RIGHT", 0, 0)
    local textboxWidth = parent:GetWidth() - checkButton:GetWidth() - leftInset * 2
    textbox:SetWidth(textboxWidth)
    textbox:SetAutoResize(true)
    ApplyTextColor(textbox, FONT_COLOR.DEFAULT)
    textbox.style:SetAlign(ALIGN_LEFT)
    textbox:SetText(text)
    local button = textbox:CreateChildWidget("button", "button", 0, true)
    local insetLeft, insetTop, insetRight, insetBottom = textbox:GetInset()
    local textWidth = textbox:GetTextLength()
    local textHeight = textbox:GetTextHeight()
    button:AddAnchor("TOPLEFT", checkButton, "BOTTOMRIGHT", insetLeft, insetTop)
    button:SetExtent(textWidth, textHeight)
    checkButton.textButton = button
    function button:OnClick()
      if checkButton:IsEnabled() then
        checkButton:SetChecked(not checkButton:GetChecked())
      end
    end
    button:SetHandler("OnClick", button.OnClick)
    function checkButton:SetButtonStyle(style)
      if self.textbox == nil then
        return
      end
      if style == "soft_brown" then
        ApplyTextColor(self.textbox, FONT_COLOR.CHECK_BUTTON_LIGHT)
        textbox:SetText(text)
      end
    end
    return checkButton
  end
  function optionLocale:SetTitleExtent(controlType, titleWidget, width, leftInset)
    if controlType == "sliderbar" or controlType == "radiobuttonH" or controlType == "radiobuttonV" or controlType == "subBigTitle" or controlType == "subNormalTitle" or controlType == "textAndButton" then
      titleWidget:SetExtent(width - leftInset * 2, 13)
    else
      titleWidget:SetExtent(170, 13)
    end
  end
  function optionLocale:SetRadioButtonHHeight(titleWidget, frameWidget, width)
    if titleWidget ~= nil then
      local lineCount = titleWidget:GetLineCount()
      frameWidget:SetExtent(width, 39 + lineCount * 13)
    else
      frameWidget:SetExtent(width, 52)
    end
  end
  optionLocale.useAutoResize = true
  optionLocale.systemConfig = {
    buttonOffsetX = {
      -107,
      8,
      107
    }
  }
  function optionLocale:UpdateSystemConfigLayout(frame, buttons)
    local sideMargin, titleMargin, bottomMargin = GetWindowMargin()
    local biggestWidth = 0
    for i = 1, #buttons do
      if buttons[i]:IsVisible() and biggestWidth < buttons[i]:GetWidth() then
        biggestWidth = buttons[i]:GetWidth()
      end
    end
    local totalHeight = 0
    local offsetX = (frame:GetWidth() - biggestWidth) / 2
    local offsetY = titleMargin
    for k = 1, #buttons do
      if buttons[k]:IsVisible() then
        if k == 1 and buttons[1]:IsVisible() then
          local line = CreateLine(buttons[1], "TYPE1")
          line:SetWidth(frame:GetWidth() - 30)
          line:AddAnchor("TOP", buttons[1], "BOTTOM", 0, 5)
        end
        buttons[k]:AddAnchor("TOPLEFT", frame, offsetX, offsetY)
        offsetY = offsetY + buttons[k]:GetHeight() + sideMargin / 2
      end
    end
    offsetY = offsetY + sideMargin
    frame:SetHeight(offsetY)
  end
  BUTTON_ICON.ESC_SKIP = {
    drawableType = "icon",
    path = "ui/button/icon_shape/skip.dds",
    fontInset = {
      left = 55,
      top = 0,
      right = 0,
      bottom = 0
    },
    drawableAnchor = {
      anchor = "LEFT",
      x = 0,
      y = 0
    },
    drawableExtent = {
      width = BUTTON_SIZE.ICON.WIDTH,
      height = BUTTON_SIZE.ICON.HEIGHT
    },
    width = BUTTON_SIZE.ICON.WIDTH,
    height = BUTTON_SIZE.ICON.HEIGHT
  }
  BUTTON_ICON.ESC_OPTION = {
    drawableType = "icon",
    path = "ui/button/icon_shape/option.dds",
    fontInset = {
      left = 55,
      top = 0,
      right = 0,
      bottom = 0
    },
    drawableAnchor = {
      anchor = "LEFT",
      x = 0,
      y = 0
    },
    drawableExtent = {
      width = BUTTON_SIZE.ICON.WIDTH,
      height = BUTTON_SIZE.ICON.HEIGHT
    },
    width = BUTTON_SIZE.ICON.WIDTH,
    height = BUTTON_SIZE.ICON.HEIGHT
  }
  BUTTON_ICON.ESC_CHARACTER_SELECT = {
    drawableType = "icon",
    path = "ui/button/icon_shape/characterselect.dds",
    fontInset = {
      left = 55,
      top = 0,
      right = 0,
      bottom = 0
    },
    drawableAnchor = {
      anchor = "LEFT",
      x = 0,
      y = 0
    },
    drawableExtent = {
      width = BUTTON_SIZE.ICON.WIDTH,
      height = BUTTON_SIZE.ICON.HEIGHT
    },
    width = 54,
    height = BUTTON_SIZE.ICON.HEIGHT
  }
  BUTTON_ICON.ESC_EXIT = {
    drawableType = "icon",
    path = "ui/button/icon_shape/exit.dds",
    fontInset = {
      left = 55,
      top = 0,
      right = 0,
      bottom = 0
    },
    drawableAnchor = {
      anchor = "LEFT",
      x = 0,
      y = 0
    },
    drawableExtent = {
      width = BUTTON_SIZE.ICON.WIDTH,
      height = BUTTON_SIZE.ICON.HEIGHT
    },
    width = BUTTON_SIZE.ICON.WIDTH,
    height = BUTTON_SIZE.ICON.HEIGHT
  }
end
